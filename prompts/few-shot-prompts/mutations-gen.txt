Generate mutations for the following snippets of code.

[[CODE]]
public static void insertionSort(int[] array) {
    for (int i = 1; i < array.length; i++) {
        int key = array[i];
        int j = i - 1;
        while (j >= 0 && array[j] > key) {
            array[j + 1] = array[j];
            j = j - 1;
        }
        array[j + 1] = key;
    }
}
[[MUTATIONS]]
int key = array[i]; |==> int key = array[i+1];
int key = array[i]; |==> int key = array[i-1];
for (int i = 1; i < array.length; i++) |==> for (int i = 0; i < array.length; i++)
for (int i = 1; i < array.length; i++) |==> for (int i = 1; i <= array.length; i++)
while (j >= 0 && array[j] > key) |==> while (j >= 0 && array[j] >= key)
while (j >= 0 && array[j] > key) |==> while (j >= 0 && array[j] < key)
array[j + 1] = array[j]; |==> array[j] = array[j + 1];
array[j + 1] = array[j]; |==> array[j + 1] = array[j - 1];

[[CODE]]
public static int knapsack(int[] weights, int[] values, int capacity) {
    int n = weights.length;
    int[][] dp = new int[n + 1][capacity + 1];
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (weights[i - 1] <= w) {
                dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][capacity];
}
[[MUTATIONS]]
int n = weights.length; |==> int n = values.length;
int n = weights.length; |==> int n = weights.length - 1;
int[][] dp = new int[n + 1][capacity + 1]; |==> int[][] dp = new int[n][capacity + 1];
int[][] dp = new int[n + 1][capacity + 1]; |==> int[][] dp = new int[n + 1][capacity];
for (int i = 1; i <= n; i++) |==> for (int i = 0; i <= n; i++)
for (int i = 1; i <= n; i++) |==> for (int i = 1; i < n; i++)
dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); |==> dp[i][w] = Math.max(dp[i][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); |==> dp[i][w] = dp[i - 1][w];

[[CODE]]
public static int binarySearch(int[] array, int target) {
    int left = 0;
    int right = array.length - 1;
    while (left <= right) {
        int middle = left + (right - left) / 2; 
        if (array[middle] == target) return middle;
        if (array[middle] < target) left = middle + 1;
        else right = middle - 1;
    }
    return -1; 
}
[[MUTATIONS]]
int left = 0; |==> int left = 1;
int left = 0; |==> int left = -1;
while (left <= right) |==> while (left < right)
while (left <= right) |==> while (left >= right)
int middle = left + (right - left) / 2; |==> int middle = (left + right) / 2;
int middle = left + (right - left) / 2; |==> int middle = right - (right - left) / 2;
int middle = left + (right - left) / 2; |==> int middle = left;
left = middle + 1; |==> left = middle;
left = middle + 1; |==> left = middle - 1;

[[CODE]]
public static void mergeSort(int[] array, int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;
        mergeSort(array, left, middle);
        mergeSort(array, middle + 1, right);
        merge(array, left, middle, right);
    }
}

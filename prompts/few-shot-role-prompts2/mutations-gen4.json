{
    "messages": [
        {"role": "user", "content": "[[CODE]]\npublic static void insertionSort(int[] array) {\n    for (int i = 1; i < array.length; i++) {\n        int key = array[i];\n        int j = i - 1;\n        while (j >= 0 && array[j] > key) {\n            array[j + 1] = array[j];\n            j = j - 1;\n        }\n        array[j + 1] = key;\n    }\n}\n"},
        {"role": "assistant", "content":"[[MUTATIONS]]\nint key = array[i]; |==> int key = array[i+1];\nint key = array[i]; |==> int key = array[i-1];\nfor (int i = 1; i < array.length; i++) |==> for (int i = 0; i < array.length; i++)\nfor (int i = 1; i < array.length; i++) |==> for (int i = 1; i <= array.length; i++)\nwhile (j >= 0 && array[j] > key) |==> while (j >= 0 && array[j] >= key)\nwhile (j >= 0 && array[j] > key) |==> while (j >= 0 && array[j] < key)\narray[j + 1] = array[j]; |==> array[j] = array[j + 1];\narray[j + 1] = array[j]; |==> array[j + 1] = array[j - 1];\n\n"},
        {"role": "user", "content":"[[CODE]]\npublic static int knapsack(int[] weights, int[] values, int capacity) {\n    int n = weights.length;\n    int[][] dp = new int[n + 1][capacity + 1];\n    for (int i = 1; i <= n; i++) {\n        for (int w = 0; w <= capacity; w++) {\n            if (weights[i - 1] <= w) {\n                dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);\n            } else {\n                dp[i][w] = dp[i - 1][w];\n            }\n        }\n    }\n    return dp[n][capacity];\n}\n"},
        {"role": "assistant", "content":"[[MUTATIONS]]\nint n = weights.length; |==> int n = values.length;\nint n = weights.length; |==> int n = weights.length - 1;\nint[][] dp = new int[n + 1][capacity + 1]; |==> int[][] dp = new int[n][capacity + 1];\nint[][] dp = new int[n + 1][capacity + 1]; |==> int[][] dp = new int[n + 1][capacity];\nfor (int i = 1; i <= n; i++) |==> for (int i = 0; i <= n; i++)\nfor (int i = 1; i <= n; i++) |==> for (int i = 1; i < n; i++)\ndp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); |==> dp[i][w] = Math.max(dp[i][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);\ndp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); |==> dp[i][w] = dp[i - 1][w];\n\n"},
        {"role": "user", "content":"[[CODE]]\npublic static int binarySearch(int[] array, int target) {\n    int left = 0;\n    int right = array.length - 1;\n    while (left <= right) {\n        int middle = left + (right - left) / 2; \n        if (array[middle] == target) return middle;\n        if (array[middle] < target) left = middle + 1;\n        else right = middle - 1;\n    }\n    return -1; \n}\n"},
        {"role": "assistant", "content":"[[MUTATIONS]]\nint left = 0; |==> int left = 1;\nint left = 0; |==> int left = -1;\nwhile (left <= right) |==> while (left < right)\nwhile (left <= right) |==> while (left >= right)\nint middle = left + (right - left) / 2; |==> int middle = (left + right) / 2;\nint middle = left + (right - left) / 2; |==> int middle = right - (right - left) / 2;\nint middle = left + (right - left) / 2; |==> int middle = left;\nleft = middle + 1; |==> left = middle;\nleft = middle + 1; |==> left = middle - 1;\n\n"},
        {"role": "user", "content":"[[CODE]]\npublic static void mergeSort(int[] array, int left, int right) {\n    if (left < right) {\n        int middle = left + (right - left) / 2;\n        mergeSort(array, left, middle);\n        mergeSort(array, middle + 1, right);\n        merge(array, left, middle, right);\n    }\n}"}        
    ]
}